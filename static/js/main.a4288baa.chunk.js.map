{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PrimarySearchAppBar","state","anchorEl","mobileMoreAnchorEl","handleProfileMenuOpen","event","_this","setState","currentTarget","handleMenuClose","handleMobileMenuClose","handleMobileMenuOpen","_this$state","this","classes","props","isMenuOpen","Boolean","isMobileMenuOpen","renderMenu","react_default","a","createElement","Menu_default","anchorOrigin","vertical","horizontal","transformOrigin","open","onClose","MenuItem_default","onClick","renderMobileMenu","IconButton_default","color","AccountCircle_default","ArrowDropDown_default","className","root","AppBar_default","position","Toolbar_default","Typography_default","title","variant","noWrap","src","grow","sectionDesktop","Button_default","aria-owns","undefined","aria-haspopup","button","sectionMobile","MoreVert_default","AirplanemodeActive_default","Hotel_default","Train_default","TimeToLeave_default","LocalActivity_default","React","Component","withStyles","theme","width","flexGrow","margin","spacing","unit","menuButton","marginLeft","marginRight","Object","defineProperty","display","breakpoints","up","input","search","borderRadius","shape","backgroundColor","fade","palette","common","white","&:hover","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4288baa.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport Badge from '@material-ui/core/Badge';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport Airplane from '@material-ui/icons/AirplanemodeActive';\nimport Hotel from '@material-ui/icons/Hotel';\nimport Train from '@material-ui/icons/Train';\nimport Car from '@material-ui/icons/TimeToLeave';\nimport Entertaiment from '@material-ui/icons/LocalActivity';\nimport DropDown from '@material-ui/icons/ArrowDropDown';\nimport Button from '@material-ui/core/Button';\nimport Bn from '@material-ui/core/CardHeader';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  button: {\n    margin: theme.spacing.unit,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  input: {\n    display: 'none',\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing.unit * 2,\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing.unit * 3,\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing.unit * 9,\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n    width: '100%',\n  },\n  inputInput: {\n    paddingTop: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 10,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 200,\n    },\n  },\n  sectionDesktop: {\n    display: 'none',\n    [theme.breakpoints.up('md')]: {\n      display: 'flex',\n    },\n  },\n  sectionMobile: {\n    display: 'flex',\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n});\n\nclass PrimarySearchAppBar extends React.Component {\n  state = {\n    anchorEl: null,\n    mobileMoreAnchorEl: null,\n  };\n\n  handleProfileMenuOpen = event => {\n    this.setState({ anchorEl: event.currentTarget });\n  };\n\n  handleMenuClose = () => {\n    this.setState({ anchorEl: null });\n    this.handleMobileMenuClose();\n  };\n\n  handleMobileMenuOpen = event => {\n    this.setState({ mobileMoreAnchorEl: event.currentTarget });\n  };\n\n  handleMobileMenuClose = () => {\n    this.setState({ mobileMoreAnchorEl: null });\n  };\n\n  render() {\n    const { anchorEl, mobileMoreAnchorEl } = this.state;\n    const { classes } = this.props;\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    const renderMenu = (\n      <Menu\n        anchorEl={anchorEl}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        open={isMenuOpen}\n        onClose={this.handleMenuClose}\n      >\n        <MenuItem onClick={this.handleMenuClose}>English(United States)</MenuItem>\n        <MenuItem onClick={this.handleMenuClose}>Bahasa(Indonesia)</MenuItem>\n      </Menu>\n    );\n\n    const renderMobileMenu = (\n      <Menu\n        anchorEl={mobileMoreAnchorEl}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        open={isMobileMenuOpen}\n        onClose={this.handleMenuClose}\n      >\n        <MenuItem onClick={this.handleMobileMenuClose}>\n          <IconButton color=\"inherit\">\n              <AccountCircle  />\n          </IconButton>\n          <p>Login</p>\n        </MenuItem>\n        <MenuItem onClick={this.handleMobileMenuClose}>\n          <p>Cek Order</p>\n        </MenuItem>\n        <MenuItem onClick={this.handleProfileMenuOpen}>\n          <IconButton color=\"inherit\">\n            <DropDown />\n          </IconButton>\n          <p>ID</p>\n        </MenuItem>\n      </Menu>\n    );\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\" color=\"white\">\n          <Toolbar> \n            <Typography className={classes.title} variant=\"h5\" color=\"inherit\" noWrap>\n             <img src=\"https://static.tiket.photos/image/upload/v1540373512/home/2018/10/24/8a3ea7a4-882d-4784-b3ac-6ab3436c00535cb9e05af73081ae469edb97e6ba6bf8.svg\"/>\n            </Typography>\n            <div className={classes.grow} />\n            <div className={classes.sectionDesktop}>\n              <Button aria-owns={isMenuOpen ? 'material-appbar' : undefined}\n                aria-haspopup=\"true\"\n                onClick={this.handleProfileMenuOpen}\n                color=\"inherit\">\n                  <DropDown />\n              </Button>\n              <p>|</p>\n              <Button className={classes.button}>\n                Cek Order\n              </Button>  \n              <p>|</p> \n              <Button className={classes.button}>\n              <AccountCircle/>\n                Login\n              </Button>\n            </div>\n            \n            <div className={classes.sectionMobile}>\n              <IconButton aria-haspopup=\"true\" onClick={this.handleMobileMenuOpen} color=\"inherit\">\n                <MoreIcon />\n              </IconButton>\n            </div>\n          </Toolbar>\n            <div>\n              <Button className={classes.button}>\n              <Airplane className=\"miring\" color=\"primary\" />\n                Pesawat\n              </Button>\n              <Button className={classes.button}>\n              <Hotel color=\"primary\" />\n                Hotel\n              </Button>\n              <Button className={classes.button}>\n              <Train color=\"primary\" />\n                Pesawat\n              </Button>\n              <Button className={classes.button}>\n              <Car color=\"primary\" />\n                Sewa Mobil\n              </Button>       \n              <Button className={classes.button}>\n              <Entertaiment className=\"miring\" color=\"primary\"/>\n                Entertainment\n              </Button>\n            </div>\n        </AppBar>\n        {renderMenu}\n        {renderMobileMenu}\n      </div>\n    );\n  }\n}\n\nPrimarySearchAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PrimarySearchAppBar);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}